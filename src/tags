!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASCII	cassandra.h	8;"	d
AUTHENTICATE	cassandra.h	33;"	d
AUTH_CHALLENGE	cassandra.h	43;"	d
AUTH_NEEDED	cassandra.h	/^int AUTH_NEEDED;$/;"	v
AUTH_RESPONSE	cassandra.h	44;"	d
AUTH_SUCCESS	cassandra.h	45;"	d
BATCH	cassandra.h	42;"	d
BIGINT	cassandra.h	9;"	d
BLOB	cassandra.h	10;"	d
BOOLEAN	cassandra.h	11;"	d
CFUHASH_FREE_DATA	cfuhash.h	269;"	d
CFUHASH_FROZEN	cfuhash.h	267;"	d
CFUHASH_FROZEN_UNTIL_GROWS	cfuhash.h	268;"	d
CFUHASH_IGNORE_CASE	cfuhash.h	270;"	d
CFUHASH_NOCOPY_KEYS	cfuhash.h	265;"	d
CFUHASH_NO_LOCKING	cfuhash.h	266;"	d
CFU_BEGIN_DECLS	cfu.h	48;"	d
CFU_BEGIN_DECLS	cfu.h	51;"	d
CFU_END_DECLS	cfu.h	49;"	d
CFU_END_DECLS	cfu.h	52;"	d
COLUMN_COUNT	cassandra.h	/^int COLUMN_COUNT;$/;"	v
COUNTER	cassandra.h	12;"	d
CUSTOM	cassandra.h	7;"	d
DECIMAL	cassandra.h	13;"	d
DOUBLE	cassandra.h	14;"	d
ERROR	cassandra.h	30;"	d
EVENT	cassandra.h	41;"	d
EXECUTE	cassandra.h	39;"	d
FLOAT	cassandra.h	15;"	d
INET	cassandra.h	22;"	d
INT	cassandra.h	16;"	d
LIBCFU_VERSION	cfu.h	65;"	d
LIST	cassandra.h	23;"	d
MAP	cassandra.h	24;"	d
NDEBUG	cfuhash.c	53;"	d	file:
NDEBUG	cfuhash.c	57;"	d	file:
NDEBUG	cfustring.c	51;"	d	file:
NDEBUG	cfustring.c	55;"	d	file:
OPTIONS	cassandra.h	34;"	d
PREPARE	cassandra.h	38;"	d
PREPARED	cassandra.h	50;"	d
QUERY	cassandra.h	36;"	d
READY	cassandra.h	32;"	d
REGISTER	cassandra.h	40;"	d
RESULT	cassandra.h	37;"	d
ROWS	cassandra.h	48;"	d
ROW_COUNT	cassandra.h	/^int ROW_COUNT;$/;"	v
SCHEMA_CHANGE	cassandra.h	51;"	d
SET	cassandra.h	25;"	d
SET_KEYSPACE	cassandra.h	49;"	d
STARTUP	cassandra.h	31;"	d
SUPPORTED	cassandra.h	35;"	d
TIMESTAMP	cassandra.h	17;"	d
TIMEUUID	cassandra.h	21;"	d
TUPLE	cassandra.h	27;"	d
UDT	cassandra.h	26;"	d
UUID	cassandra.h	18;"	d
VARCHAR	cassandra.h	19;"	d
VARINT	cassandra.h	20;"	d
VOID	cassandra.h	47;"	d
_CFU_HASH_H_	cfuhash.h	42;"	d
_CFU_STRING_H_	cfustring.h	42;"	d
_CFU_TYPES_H_	cfutypes.h	7;"	d
_LIBCFU_H_	cfu.h	42;"	d
_REENTRANT	cfu.h	59;"	d
_THREAD_SAFE	cfu.h	62;"	d
__cfustring_split_to_raw	cfustring.c	/^__cfustring_split_to_raw(cfustring_t *cfu_str, size_t *num_strings, size_t num_seps, size_t limit,$/;"	f	file:
_cfuhash_destroy_entry	cfuhash.c	/^_cfuhash_destroy_entry(cfuhash_table_t *ht, cfuhash_entry *he, cfuhash_free_fn_t ff) {$/;"	f	file:
_cfuhash_new	cfuhash.c	/^_cfuhash_new(size_t size, u_int32_t flags) {$/;"	f	file:
_check_sep	cfustring.c	/^_check_sep(char **start, char **seps, size_t num_seps, char **sep_chk_ptrs, int last) {$/;"	f	file:
_dup_str	cfustring.c	/^_dup_str(const char *str) {$/;"	f	file:
_dup_str_n	cfustring.c	/^_dup_str_n(const char *str, size_t n) {$/;"	f	file:
_pretty_print_arg	cfuhash.c	/^typedef struct _pretty_print_arg {$/;"	s	file:
_pretty_print_arg	cfuhash.c	/^} _pretty_print_arg;$/;"	t	typeref:struct:_pretty_print_arg	file:
_pretty_print_foreach	cfuhash.c	/^_pretty_print_foreach(void *key, size_t key_size, void *data, size_t data_size, void *arg) {$/;"	f	file:
_safe_sprintf	cfustring.c	/^_safe_sprintf(char **buf, size_t *buf_size, const char *fmt, ...) {$/;"	f	file:
_safe_strncpy	cfustring.c	/^_safe_strncpy(char **buf, size_t *buf_size, const char *src, size_t size) {$/;"	f	file:
buckets	cfuhash.c	/^	cfuhash_entry **buckets;$/;"	m	struct:cfuhash_table	file:
buffer	cassandra.h	/^	uint8_t *buffer;			\/* ResultSet Object description *\/$/;"	m	struct:result_set
cass_connect	cassandra.c	/^int cass_connect(int sock, char *ip, char *user, char *pass)$/;"	f
cass_execute	cassandra.c	/^result_set *cass_execute(char *query)$/;"	f
cass_prepare_statement	cassandra.c	/^cass_prepared_statement *cass_prepare_statement(char *str)$/;"	f
cass_prepared_statement	cassandra.h	/^typedef struct cass_prepared_statement$/;"	s
cass_prepared_statement	cassandra.h	/^} cass_prepared_statement;$/;"	t	typeref:struct:cass_prepared_statement
cfu_get_type	cfu.c	/^cfu_get_type(void *item) {$/;"	f
cfu_is_conf	cfu.c	/^cfu_is_conf(void *item) {$/;"	f
cfu_is_hash	cfu.c	/^cfu_is_hash(void *item) {$/;"	f
cfu_is_list	cfu.c	/^cfu_is_list(void *item) {$/;"	f
cfu_is_string	cfu.c	/^cfu_is_string(void *item) {$/;"	f
cfu_is_time	cfu.c	/^cfu_is_time(void *item) {$/;"	f
cfuhash_bencode_strings	cfuhash.c	/^cfuhash_bencode_strings(cfuhash_table_t *ht) {$/;"	f
cfuhash_clear	cfuhash.c	/^cfuhash_clear(cfuhash_table_t *ht) {$/;"	f
cfuhash_clear_flag	cfuhash.c	/^cfuhash_clear_flag(cfuhash_table_t *ht, u_int32_t new_flag) {$/;"	f
cfuhash_copy	cfuhash.c	/^cfuhash_copy(cfuhash_table_t *src, cfuhash_table_t *dst) {$/;"	f
cfuhash_delete	cfuhash.c	/^cfuhash_delete(cfuhash_table_t *ht, const char *key) {$/;"	f
cfuhash_delete_data	cfuhash.c	/^cfuhash_delete_data(cfuhash_table_t *ht, const void *key, size_t key_size) {$/;"	f
cfuhash_destroy	cfuhash.c	/^cfuhash_destroy(cfuhash_table_t *ht) {$/;"	f
cfuhash_destroy_with_free_fn	cfuhash.c	/^cfuhash_destroy_with_free_fn(cfuhash_table_t *ht, cfuhash_free_fn_t ff) {$/;"	f
cfuhash_each	cfuhash.c	/^cfuhash_each(cfuhash_table_t *ht, char **key, void **data) {$/;"	f
cfuhash_each_data	cfuhash.c	/^cfuhash_each_data(cfuhash_table_t *ht, void **key, size_t *key_size, void **data,$/;"	f
cfuhash_entry	cfuhash.c	/^typedef struct cfuhash_entry {$/;"	s	file:
cfuhash_entry	cfuhash.c	/^} cfuhash_entry;$/;"	t	typeref:struct:cfuhash_entry	file:
cfuhash_event_flags	cfuhash.c	/^typedef struct cfuhash_event_flags {$/;"	s	file:
cfuhash_event_flags	cfuhash.c	/^} cfuhash_event_flags;$/;"	t	typeref:struct:cfuhash_event_flags	file:
cfuhash_exists	cfuhash.c	/^cfuhash_exists(cfuhash_table_t *ht, const char *key) {$/;"	f
cfuhash_exists_data	cfuhash.c	/^cfuhash_exists_data(cfuhash_table_t *ht, const void *key, size_t key_size) {$/;"	f
cfuhash_foreach	cfuhash.c	/^cfuhash_foreach(cfuhash_table_t *ht, cfuhash_foreach_fn_t fe_fn, void *arg) {$/;"	f
cfuhash_foreach_fn_t	cfuhash.h	/^    typedef int (*cfuhash_foreach_fn_t)(void *key, size_t key_size, void *data, size_t data_size,$/;"	t
cfuhash_foreach_remove	cfuhash.c	/^cfuhash_foreach_remove(cfuhash_table_t *ht, cfuhash_remove_fn_t r_fn, cfuhash_free_fn_t ff,$/;"	f
cfuhash_free_fn_t	cfuhash.h	/^    typedef void (*cfuhash_free_fn_t)(void *data);$/;"	t
cfuhash_function_t	cfuhash.h	/^    typedef u_int32_t (*cfuhash_function_t)(const void *key, size_t length);$/;"	t
cfuhash_get	cfuhash.c	/^cfuhash_get(cfuhash_table_t *ht, const char *key) {$/;"	f
cfuhash_get_data	cfuhash.c	/^cfuhash_get_data(cfuhash_table_t *ht, const void *key, size_t key_size, void **r,$/;"	f
cfuhash_get_flags	cfuhash.c	/^cfuhash_get_flags(cfuhash_table_t *ht) {$/;"	f
cfuhash_keys	cfuhash.c	/^cfuhash_keys(cfuhash_table_t *ht, size_t *num_keys, int fast) {$/;"	f
cfuhash_keys_data	cfuhash.c	/^cfuhash_keys_data(cfuhash_table_t *ht, size_t *num_keys, size_t **key_sizes, int fast) {$/;"	f
cfuhash_lock	cfuhash.c	/^cfuhash_lock(cfuhash_table_t *ht) {$/;"	f
cfuhash_merge	cfuhash.c	/^cfuhash_merge(cfuhash_table_t *ht1, cfuhash_table_t *ht2, u_int32_t flags) {$/;"	f
cfuhash_new	cfuhash.c	/^cfuhash_new() {$/;"	f
cfuhash_new_with_flags	cfuhash.c	/^cfuhash_new_with_flags(u_int32_t flags) {$/;"	f
cfuhash_new_with_free_fn	cfuhash.c	/^extern cfuhash_table_t * cfuhash_new_with_free_fn(cfuhash_free_fn_t ff) {$/;"	f
cfuhash_new_with_initial_size	cfuhash.c	/^cfuhash_new_with_initial_size(size_t size) {$/;"	f
cfuhash_next	cfuhash.c	/^cfuhash_next(cfuhash_table_t *ht, char **key, void **data) {$/;"	f
cfuhash_next_data	cfuhash.c	/^cfuhash_next_data(cfuhash_table_t *ht, void **key, size_t *key_size, void **data,$/;"	f
cfuhash_num_buckets	cfuhash.c	/^cfuhash_num_buckets(cfuhash_table_t *ht) {$/;"	f
cfuhash_num_buckets_used	cfuhash.c	/^cfuhash_num_buckets_used(cfuhash_table_t *ht) {$/;"	f
cfuhash_num_entries	cfuhash.c	/^cfuhash_num_entries(cfuhash_table_t *ht) {$/;"	f
cfuhash_pretty_print	cfuhash.c	/^cfuhash_pretty_print(cfuhash_table_t *ht, FILE *fp) {$/;"	f
cfuhash_put	cfuhash.c	/^cfuhash_put(cfuhash_table_t *ht, const char *key, void *data) {$/;"	f
cfuhash_put_data	cfuhash.c	/^cfuhash_put_data(cfuhash_table_t *ht, const void *key, size_t key_size, void *data,$/;"	f
cfuhash_rehash	cfuhash.c	/^cfuhash_rehash(cfuhash_table_t *ht) {$/;"	f
cfuhash_remove_fn_t	cfuhash.h	/^    typedef int (*cfuhash_remove_fn_t)(void *key, size_t key_size, void *data, size_t data_size,$/;"	t
cfuhash_set_flag	cfuhash.c	/^cfuhash_set_flag(cfuhash_table_t *ht, u_int32_t new_flag) {$/;"	f
cfuhash_set_free_function	cfuhash.c	/^cfuhash_set_free_function(cfuhash_table_t * ht, cfuhash_free_fn_t ff) {$/;"	f
cfuhash_set_hash_function	cfuhash.c	/^cfuhash_set_hash_function(cfuhash_table_t *ht, cfuhash_function_t hf) {$/;"	f
cfuhash_set_thresholds	cfuhash.c	/^cfuhash_set_thresholds(cfuhash_table_t *ht, float low, float high) {$/;"	f
cfuhash_table	cfuhash.c	/^struct cfuhash_table {$/;"	s	file:
cfuhash_table_t	cfuhash.h	/^    typedef struct cfuhash_table cfuhash_table_t;$/;"	t	typeref:struct:cfuhash_table
cfuhash_unlock	cfuhash.c	/^cfuhash_unlock(cfuhash_table_t *ht) {$/;"	f
cfustring	cfustring.c	/^struct cfustring {$/;"	s	file:
cfustring_append	cfustring.c	/^cfustring_append(cfustring_t *cfu_str, const char *string) {$/;"	f
cfustring_append_n	cfustring.c	/^cfustring_append_n(cfustring_t *cfu_str, const char *string, size_t n) {$/;"	f
cfustring_c_str_split	cfustring.c	/^cfustring_c_str_split(const char *c_str, size_t *num_strings, size_t limit, ...) {$/;"	f
cfustring_clear	cfustring.c	/^cfustring_clear(cfustring_t *cfu_str) {$/;"	f
cfustring_destroy	cfustring.c	/^cfustring_destroy(cfustring_t *cfu_str) {$/;"	f
cfustring_dup	cfustring.c	/^cfustring_dup(cfustring_t *cfu_str, const char *string) {$/;"	f
cfustring_dup_c_str	cfustring.c	/^cfustring_dup_c_str(const char *str) {$/;"	f
cfustring_dup_c_str_n	cfustring.c	/^cfustring_dup_c_str_n(const char *str, size_t n) {$/;"	f
cfustring_get_buffer	cfustring.c	/^cfustring_get_buffer(cfustring_t *cfu_str) {$/;"	f
cfustring_get_buffer_copy	cfustring.c	/^cfustring_get_buffer_copy(cfustring_t *cfu_str) {$/;"	f
cfustring_new	cfustring.c	/^cfustring_new() {$/;"	f
cfustring_new_from_string	cfustring.c	/^cfustring_new_from_string(const char *string) {$/;"	f
cfustring_new_with_initial_size	cfustring.c	/^cfustring_new_with_initial_size(size_t initial_size) {$/;"	f
cfustring_split	cfustring.c	/^cfustring_split(cfustring_t *cfu_str, size_t *num_strings, size_t limit, ...) {$/;"	f
cfustring_split_to_c_str	cfustring.c	/^cfustring_split_to_c_str(cfustring_t *cfu_str, size_t *num_strings, size_t limit, ...) {$/;"	f
cfustring_sprintf	cfustring.c	/^cfustring_sprintf(cfustring_t *cfu_str, const char *fmt, ...) {$/;"	f
cfustring_sprintf_c_str	cfustring.c	/^cfustring_sprintf_c_str(const char *fmt, ...) {$/;"	f
cfustring_t	cfustring.h	/^    typedef struct cfustring cfustring_t;$/;"	t	typeref:struct:cfustring
cfustring_vsprintf	cfustring.c	/^cfustring_vsprintf(cfustring_t *cfu_str, const char *fmt_in, va_list ap) {$/;"	f
col_desc_array	cassandra.h	/^	column_desc *col_desc_array;$/;"	m	struct:result_set
column_count	cassandra.h	/^	int column_count, row_count, curr_pos, curr_row;$/;"	m	struct:result_set
column_desc	cassandra.h	/^typedef struct column_desc{$/;"	s
column_desc	cassandra.h	/^}column_desc;$/;"	t	typeref:struct:column_desc
count	cfuhash.c	/^	size_t count;$/;"	m	struct:_pretty_print_arg	file:
create_rs	cassandra.c	/^result_set *create_rs()$/;"	f
curr_pos	cassandra.h	/^	int column_count, row_count, curr_pos, curr_row;$/;"	m	struct:result_set
curr_row	cassandra.h	/^	int column_count, row_count, curr_pos, curr_row;$/;"	m	struct:result_set
data	cfuhash.c	/^	void *data;$/;"	m	struct:cfuhash_entry	file:
data_size	cfuhash.c	/^	size_t data_size;$/;"	m	struct:cfuhash_entry	file:
each_bucket_index	cfuhash.c	/^	size_t each_bucket_index;$/;"	m	struct:cfuhash_table	file:
each_chain_entry	cfuhash.c	/^	cfuhash_entry *each_chain_entry;$/;"	m	struct:cfuhash_table	file:
entries	cfuhash.c	/^	size_t entries; \/* Total number of entries in the table. *\/$/;"	m	struct:cfuhash_table	file:
event_flags	cfuhash.c	/^	cfuhash_event_flags event_flags;$/;"	m	struct:cfuhash_table	file:
flags	cfuhash.c	/^	u_int32_t flags;$/;"	m	struct:cfuhash_table	file:
fp	cfuhash.c	/^	FILE *fp;$/;"	m	struct:_pretty_print_arg	file:
free_fn	cfuhash.c	/^	cfuhash_free_fn_t free_fn;$/;"	m	struct:cfuhash_table	file:
get_val	cassandra.c	/^void *get_val(result_set *rs, char *column_name)$/;"	f
has_next	cassandra.c	/^int has_next(result_set *rs)$/;"	f
hash_add_entry	cfuhash.c	/^hash_add_entry(cfuhash_table_t *ht, u_int hv, const void *key, size_t key_size,$/;"	f	file:
hash_cmp	cfuhash.c	/^hash_cmp(const void *key, size_t key_size, cfuhash_entry *he, u_int case_insensitive) {$/;"	f	file:
hash_func	cfuhash.c	/^	cfuhash_function_t hash_func;$/;"	m	struct:cfuhash_table	file:
hash_func	cfuhash.c	/^hash_func(const void *key, size_t length) {$/;"	f	file:
hash_key_dup	cfuhash.c	/^hash_key_dup(const void *key, size_t key_size) {$/;"	f	file:
hash_key_dup_lower_case	cfuhash.c	/^hash_key_dup_lower_case(const void *key, size_t key_size) {$/;"	f	file:
hash_size	cfuhash.c	/^hash_size(u_int s) {$/;"	f	file:
hash_value	cfuhash.c	/^hash_value(cfuhash_table_t *ht, const void *key, size_t key_size, size_t num_buckets) {$/;"	f	file:
high	cfuhash.c	/^	float high;$/;"	m	struct:cfuhash_table	file:
id	cassandra.h	/^	uint8_t *id;$/;"	m	struct:cass_prepared_statement
id_length	cassandra.h	/^	int id_length;$/;"	m	struct:cass_prepared_statement
init_rs	cassandra.c	/^void init_rs(result_set *rs)$/;"	f
int32_to_uint8	cassandra.c	/^void int32_to_uint8(uint8_t *output,int n)$/;"	f
key	cfuhash.c	/^	void *key;$/;"	m	struct:cfuhash_entry	file:
key_size	cfuhash.c	/^	size_t key_size;$/;"	m	struct:cfuhash_entry	file:
libcfu_item	cfu.c	/^struct libcfu_item {$/;"	s	file:
libcfu_item_t	cfu.h	/^typedef struct libcfu_item libcfu_item_t;$/;"	t	typeref:struct:libcfu_item
libcfu_t_conf	cfu.h	/^			   libcfu_t_time, libcfu_t_conf } libcfu_type;$/;"	e	enum:__anon1
libcfu_t_hash_table	cfu.h	/^typedef enum { libcfu_t_none = 0, libcfu_t_hash_table, libcfu_t_list, libcfu_t_string,$/;"	e	enum:__anon1
libcfu_t_list	cfu.h	/^typedef enum { libcfu_t_none = 0, libcfu_t_hash_table, libcfu_t_list, libcfu_t_string,$/;"	e	enum:__anon1
libcfu_t_none	cfu.h	/^typedef enum { libcfu_t_none = 0, libcfu_t_hash_table, libcfu_t_list, libcfu_t_string,$/;"	e	enum:__anon1
libcfu_t_string	cfu.h	/^typedef enum { libcfu_t_none = 0, libcfu_t_hash_table, libcfu_t_list, libcfu_t_string,$/;"	e	enum:__anon1
libcfu_t_time	cfu.h	/^			   libcfu_t_time, libcfu_t_conf } libcfu_type;$/;"	e	enum:__anon1
libcfu_type	cfu.h	/^			   libcfu_t_time, libcfu_t_conf } libcfu_type;$/;"	t	typeref:enum:__anon1
lock_hash	cfuhash.c	/^lock_hash(cfuhash_table_t *ht) {$/;"	f	file:
low	cfuhash.c	/^	float low;$/;"	m	struct:cfuhash_table	file:
main	hash_usage.c	/^int main(int argc, char **argv) {$/;"	f
main	sample.c	/^int main(void)$/;"	f
map	cassandra.h	/^	cfuhash_table_t *map;$/;"	m	struct:result_set
max_size	cfustring.c	/^	size_t max_size;$/;"	m	struct:cfustring	file:
mutex	cfuhash.c	/^	pthread_mutex_t mutex;$/;"	m	struct:cfuhash_table	file:
name	cassandra.h	/^	char *name;				\/* Column description structure for ResultSet *\/$/;"	m	struct:column_desc
next	cfuhash.c	/^	struct cfuhash_entry *next;$/;"	m	struct:cfuhash_entry	typeref:struct:cfuhash_entry::cfuhash_entry	file:
num_buckets	cfuhash.c	/^	size_t num_buckets;$/;"	m	struct:cfuhash_table	file:
pad	cfuhash.c	/^	int pad:31;$/;"	m	struct:cfuhash_event_flags	file:
remove_func	hash_usage.c	/^remove_func(void *key, size_t key_size, void *data, size_t data_size, void *arg) {$/;"	f	file:
resized	cfuhash.c	/^	int resized:1;$/;"	m	struct:cfuhash_event_flags	file:
resized_count	cfuhash.c	/^	unsigned int resized_count;$/;"	m	struct:cfuhash_table	file:
result_set	cassandra.h	/^typedef struct result_set{$/;"	s
result_set	cassandra.h	/^}result_set;$/;"	t	typeref:struct:result_set
result_set_destroy	cassandra.c	/^void result_set_destroy(result_set *rs)$/;"	f
row_count	cassandra.h	/^	int column_count, row_count, curr_pos, curr_row;$/;"	m	struct:result_set
schema_name	cassandra.h	/^	char *schema_name;	$/;"	m	struct:result_set
serv_addr	cassandra.h	/^struct sockaddr_in serv_addr;$/;"	v	typeref:struct:sockaddr_in
sockfd	cassandra.h	/^int sockfd;$/;"	v
str	cfustring.c	/^	char *str;$/;"	m	struct:cfustring	file:
table_name	cassandra.h	/^	char *table_name;$/;"	m	struct:result_set
type	cassandra.h	/^	uint16_t type; 	$/;"	m	struct:column_desc
type	cfu.c	/^	libcfu_type type;$/;"	m	struct:libcfu_item	file:
type	cfuhash.c	/^	libcfu_type type;$/;"	m	struct:cfuhash_table	file:
type	cfustring.c	/^	libcfu_type type;$/;"	m	struct:cfustring	file:
uint8_to_int16	cassandra.c	/^int uint8_to_int16(uint8_t *input)$/;"	f
uint8_to_int32	cassandra.c	/^int uint8_to_int32(uint8_t *input)$/;"	f
uint8_to_string	cassandra.c	/^void uint8_to_string(uint8_t *in, int n, char *output)$/;"	f
unlock_hash	cfuhash.c	/^unlock_hash(cfuhash_table_t *ht) {$/;"	f	file:
used_size	cfustring.c	/^	size_t used_size;$/;"	m	struct:cfustring	file:
